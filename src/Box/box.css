@import '../base';

@mixin boxPadding($space, $v, $i) {
  .u-box--p-#{$space}-#{$i} {
    padding: #{$value}px;
  }
  .u-box--px-#{$space}-#{$i} {
    padding-left: #{$value}px;
    padding-right: #{$value}px;
  }
  .u-box--py-#{$space}-#{$i} {
    padding-top: #{$value}px;
    padding-bottom: #{$value}px;
  }
  .u-box--pt-#{$space}-#{$i} {
    padding-top: #{$value}px;
  }
  .u-box--pr-#{$space}-#{$i} {
    padding-right: #{$value}px;
  }
  .u-box--pb-#{$space}-#{$i} {
    padding-bottom: #{$value}px;
  }
  .u-box--pl-#{$space}-#{$i} {
    padding-left: #{$value}px;
  }
}

@mixin boxMargin($space, $v, $i) {
  .u-box--m-#{$space}-#{$i} {
    margin: #{$value}px;
  }
  .u-box--mx-#{$space}-#{$i} {
    margin-left: #{$value}px;
    margin-right: #{$value}px;
  }
  .u-box--my-#{$space}-#{$i} {
    margin-top: #{$value}px;
    margin-bottom: #{$value}px;
  }
  .u-box--mt-#{$space}-#{$i} {
    margin-top: #{$value}px;
  }
  .u-box--mr-#{$space}-#{$i} {
    margin-right: #{$value}px;
  }
  .u-box--mb-#{$space}-#{$i} {
    margin-bottom: #{$value}px;
  }
  .u-box--ml-#{$space}-#{$i} {
    margin-left: #{$value}px;
  }
}

@mixin boxDisplay($i) {
  .u-box--display-none-#{$i} {
    display: none;
  }
  .u-box--display-inline-#{$i} {
    display: inline;
  }
  .u-box--display-block-#{$i} {
    display: block;
  }
  .u-box--display-flex-#{$i} {
    display: flex;
  }
  .u-box--display-grid-#{$i} {
    display: flex;
  }
}

@mixin boxSize($space, $v, $i) {
  .u-box--size-#{$space}-#{$i} {
    width: #{$value}px;
    height: #{$value}px;
  }
}

.u-box--wrap {
  flex-wrap: wrap;
}

@each $bp $i in $breakpoints {
  @if $i == 0 {
    @each $value $space in $spacingMap {
      @include boxPadding($space, $value, 0);
      @include boxMargin($space, $value, 0);
      @include boxSize($space, $value, 0);
    }
    @include boxDisplay(0);
    @each $alignValue in (flex-start, flex-end, center, baseline, stretch) {
      .u-box--alignItems-#{$alignValue}-0,
      .u-box--align-#{$alignValue}-0 {
        align-items: $alignValue;
      }
    }
    @each $justifyValue
      in (flex-start, flex-end, center, space-around, space-between, stretch)
    {
      .u-box--justifyContent-#{$justifyValue}-0,
      u-box--justify-#{$justifyValue}-0 {
        justify-content: $justifyValue;
      }
    }
    @for $k from 1 through 5 {
      .u-box--grow-#{$k}-0 {
        flex-grow: $k;
      }
    }
  } @else {
    @media (min-width: #{$bp}px) {
      @each $value $space in $spacingMap {
        @include boxPadding($space, $value, $i);
        @include boxMargin($space, $value, $i);
        @include boxSize($space, $value, $i);
      }
      @include boxDisplay($i);
      @each $alignValue in (flex-start, flex-end, center, baseline, stretch) {
        .u-box--alignItems-#{$alignValue}-#{$i},
        .u-box--align-#{$alignValue}-#{$i} {
          align-items: $alignValue;
        }
      }
      @each $justifyValue
        in (flex-start, flex-end, center, space-around, space-between, stretch)
      {
        .u-box--justifyContent-#{$justifyValue}-#{$i},
        u-box--justify-#{$justifyValue}-#{$i} {
          justify-content: $justifyValue;
        }
      }
      @for $k from 1 through 5 {
        .u-box--grow-#{$k}-#{$i} {
          flex-grow: $k;
        }
      }
    }
  }
}

.bg--transparent {
  background-color: transparent;
}

.bg--white {
  background-color: white;
}

@each $color $tone in $base-colors {
  .bg--#{$tone} {
    background-color: $color;
  }

  .tone--#{$tone} {
    color: $color;
  }

  .tone--neutral-on-#{$tone} {
    color: contrast($color);
  }

  .tone--secondary-on-#{$tone} {
    color: contrast($color);
  }

  .shadow--borderStandard-on-#{$tone} {
    box-shadow: inset 0 0 0 2px contrast($color);
  }
}

.shadow--borderStandard {
  box-shadow: inset 0 0 0 2px map-get($base-colors, subtle);
}
