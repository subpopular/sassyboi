@import '../utils';

.u-box {
}

@mixin boxDisplay($i) {
  .display-none-#{$i} {
    display: none;
  }
  .display-inline-#{$i} {
    display: inline;
  }
  .display-block-#{$i} {
    display: block;
  }
  .display-flex-#{$i} {
    display: flex;
  }
  .display-grid-#{$i} {
    display: flex;
  }
}

@mixin boxSize($space, $v, $i) {
  .size-#{$space}-#{$i} {
    width: #{$value}px;
    height: #{$value}px;
  }
  .minHeight-#{$space}-#{$i} {
    min-height: #{$value}px;
  }
  .height-#{$space}-#{$i} {
    height: #{$value}px;
  }
  .width-#{$space}-#{$i} {
    width: #{$value}px;
  }
}

.wrap {
  flex-wrap: wrap;
}

@each $bp $i in $breakpoints {
  @if $i == 0 {
    .height-full-0 {
      height: 100%;
    }
    .height-half-0 {
      height: 50%;
    }
    .width-full-0 {
      width: 100%;
    }
    .width-half-0 {
      width: 50%;
    }
    @each $value $space in $spacingMap {
      @include boxSize($space, $value, 0);
    }
    @include boxDisplay(0);
    @each $position in (absolute, relative, fixed, sticky, static) {
      .position-#{$position}-0 {
        position: $position;
      }
    }
    @each $alignValue in (flex-start, flex-end, center, baseline, stretch) {
      .alignItems-#{$alignValue}-0,
      .align-#{$alignValue}-0 {
        align-items: $alignValue;
      }
      .alignSelf-#{$alignValue}-0 {
        align-self: $alignValue;
      }
    }
    @each $justifyValue
      in (flex-start, flex-end, center, space-around, space-between, stretch)
    {
      .justifyContent-#{$justifyValue}-0,
      .justify-#{$justifyValue}-0 {
        justify-content: $justifyValue;
      }
    }
    @for $k from 1 through 5 {
      .grow-#{$k}-0 {
        flex-grow: $k;
      }
    }
    @each $overflowValue in (hidden, visible, auto, scroll) {
      .overflow-#{$overflowValue}-0 {
        overflow: $overflowValue;
      }

      .overflowX-#{$overflowValue}-0 {
        overflow-x: $overflowValue;
      }

      .overflowY-#{$overflowValue}-0 {
        overflow-y: $overflowValue;
      }
    }
  } @else {
    @media (min-width: #{$bp}px) {
      .height-full-#{$i} {
        height: 100%;
      }
      .height-half-#{$i} {
        height: 50%;
      }
      .width-full-#{$i} {
        width: 100%;
      }
      .width-half-#{$i} {
        width: 50%;
      }
      @each $value $space in $spacingMap {
        @include boxSize($space, $value, $i);
      }
      @include boxDisplay($i);
      @each $position in (absolute, relative, fixed, sticky, static) {
        .position-#{$position}-#{$i} {
          position: $position;
        }
      }
      @each $alignValue in (flex-start, flex-end, center, baseline, stretch) {
        .alignItems-#{$alignValue}-#{$i},
        .align-#{$alignValue}-#{$i} {
          align-items: $alignValue;
        }
        .alignSelf-#{$alignValue}-#{$i} {
          align-self: $alignValue;
        }
      }
      @each $justifyValue
        in (flex-start, flex-end, center, space-around, space-between, stretch)
      {
        .justifyContent-#{$justifyValue}-#{$i},
        .justify-#{$justifyValue}-#{$i} {
          justify-content: $justifyValue;
        }
      }
      @for $k from 1 through 5 {
        .grow-#{$k}-#{$i} {
          flex-grow: $k;
        }
      }
      @each $overflowValue in (hidden, visible, auto, scroll) {
        .overflow-#{$overflowValue}-#{$i} {
          overflow: $overflowValue;
        }

        .overflowX-#{$overflowValue}-#{$i} {
          overflow-x: $overflowValue;
        }

        .overflowY-#{$overflowValue}-#{$i} {
          overflow-y: $overflowValue;
        }
      }
    }
  }
}

@each $color $tone in $base-colors {
  .shadow--borderStandard-on-#{$tone} {
    box-shadow: inset
      0
      0
      0
      2px
      isLight(
        $color,
        map-get($base-colors, subtle),
        map-get($base-colors, white)
      );
  }
}

.shadow--borderStandard {
  box-shadow: inset 0 0 0 2px map-get($base-colors, subtle);
}
