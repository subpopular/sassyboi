@import '../base';

@mixin boxPadding($space, $v, $i) {
  .u-box--p-#{$space}-#{$i} {
    padding: calc($value * 1px);
  }
  .u-box--px-#{$space}-#{$i} {
    padding-left: calc($value * 1px);
    padding-right: calc($value * 1px);
  }
  .u-box--py-#{$space}-#{$i} {
    padding-top: calc($value * 1px);
    padding-bottom: calc($value * 1px);
  }
  .u-box--pt-#{$space}-#{$i} {
    padding-top: calc($value * 1px);
  }
  .u-box--pr-#{$space}-#{$i} {
    padding-right: calc($value * 1px);
  }
  .u-box--pb-#{$space}-#{$i} {
    padding-bottom: calc($value * 1px);
  }
  .u-box--pl-#{$space}-#{$i} {
    padding-left: calc($value * 1px);
  }
}

@mixin boxMargin($space, $v, $i) {
  .u-box--m-#{$space}-#{$i} {
    margin: calc($value * 1px);
  }
  .u-box--mx-#{$space}-#{$i} {
    margin-left: calc($value * 1px);
    margin-right: calc($value * 1px);
  }
  .u-box--my-#{$space}-#{$i} {
    margin-top: calc($value * 1px);
    margin-bottom: calc($value * 1px);
  }
  .u-box--mt-#{$space}-#{$i} {
    margin-top: calc($value * 1px);
  }
  .u-box--mr-#{$space}-#{$i} {
    margin-right: calc($value * 1px);
  }
  .u-box--mb-#{$space}-#{$i} {
    margin-bottom: calc($value * 1px);
  }
  .u-box--ml-#{$space}-#{$i} {
    margin-left: calc($value * 1px);
  }
}

@mixin boxDisplay($i) {
  .u-box--display-none-#{$i} {
    display: none;
  }
  .u-box--display-inline-#{$i} {
    display: inline;
  }
  .u-box--display-block-#{$i} {
    display: block;
  }
  .u-box--display-flex-#{$i} {
    display: flex;
  }
}

@mixin boxSize($space, $v, $i) {
  .u-box--size-#{$space}-#{$i} {
    width: calc($value * 1px);
    height: calc($value * 1px);
  }
}

@each $bp $i in $breakpoints {
  @if $i == 0 {
    @each $value $space in $spacingMap {
      @include boxPadding($space, $value, 0);
      @include boxMargin($space, $value, 0);
      @include boxSize($space, $value, 0);
    }
    @include boxDisplay(0);
    @for $k from 1 through 5 {
      .u-box--grow-#{$k}-0 {
        flex-grow: $k;
      }
    }
  } @else {
    @media (min-width: #{$bp}px) {
      @each $value $space in $spacingMap {
        @include boxPadding($space, $value, $i);
        @include boxMargin($space, $value, $i);
        @include boxSize($space, $value, $i);
      }
      @include boxDisplay($i);
      @for $k from 1 through 5 {
        .u-box--grow-#{$k}-#{$i} {
          flex-grow: $k;
        }
      }
    }
  }
}

.bg--transparent {
  background-color: transparent;
}

.bg--white {
  background-color: white;
}

@each $color $tone in $base-colors {
  .bg--#{$tone} {
    background-color: $color;
  }

  .tone--#{$tone} {
    color: $color;
  }

  .tone--neutral-on-#{$tone} {
    @if isLight($color) == true {
      color: map-get($base-colors, neutral);
    } @else {
      color: map-get($base-colors, neutralInverted);
    }
  }

  .tone--secondary-on-#{$tone} {
    @if isLight($color) == true {
      color: map-get($base-colors, secondary);
    } @else {
      color: map-get($base-colors, secondaryInverted);
    }
  }

  .shadow--borderStandard-on-#{$tone} {
    @if isLight($color) == true {
      box-shadow: inset 0 0 0 2px map-get($base-colors, secondary);
    } @else {
      box-shadow: inset 0 0 0 2px map-get($base-colors, secondaryInverted);
    }
  }
}

.shadow--borderStandard {
  box-shadow: inset 0 0 0 2px map-get($base-colors, subtle);
}
